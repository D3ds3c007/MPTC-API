// <auto-generated />
using System;
using MPTC_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MPTC_API.Migrations
{
    [DbContext(typeof(MptcContext))]
    [Migration("20241008090337_AddMatriculeSequence")]
    partial class AddMatriculeSequence
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("public.matriculesequence")
                .StartsAt(1000L);

            modelBuilder.Entity("MPTC_API.Models.Attendance.Log", b =>
                {
                    b.Property<int>("IdLogs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdLogs"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("IsDateTimeIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer");

                    b.HasKey("IdLogs");

                    b.HasIndex("StaffId");

                    b.ToTable("Logss");
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.Member", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("IdMember")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("StaffId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.Nationality", b =>
                {
                    b.Property<int>("IdNationality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdNationality"));

                    b.Property<string>("NationalityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdNationality");

                    b.ToTable("Nationalitys");
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.Policy", b =>
                {
                    b.Property<int>("IdPolicy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPolicy"));

                    b.Property<double>("Delay")
                        .HasColumnType("double precision");

                    b.Property<int>("PrivilegeId")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.HasKey("IdPolicy");

                    b.HasIndex("PrivilegeId");

                    b.ToTable("Policys");
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.Privilege", b =>
                {
                    b.Property<int>("IdPrivilege")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPrivilege"));

                    b.Property<string>("PrivilegeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdPrivilege");

                    b.ToTable("Privileges");
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.Sanction", b =>
                {
                    b.Property<int>("IdSanction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSanction"));

                    b.Property<DateTime>("DateSanction")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PolicyId")
                        .HasColumnType("integer");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer");

                    b.HasKey("IdSanction");

                    b.HasIndex("PolicyId");

                    b.HasIndex("StaffId");

                    b.ToTable("Sanctions");
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.Schedule", b =>
                {
                    b.Property<int>("IdSchedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSchedule"));

                    b.Property<TimeSpan>("Begin")
                        .HasColumnType("interval");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("End")
                        .HasColumnType("interval");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer");

                    b.HasKey("IdSchedule");

                    b.HasIndex("StaffId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.Staff", b =>
                {
                    b.Property<int>("IdStaff")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdStaff"));

                    b.Property<DateTime>("Birth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HomeAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IDCardNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Matricule")
                        .HasColumnType("text");

                    b.Property<int>("NationalityId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PrivilegeId")
                        .HasColumnType("integer");

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("IdStaff");

                    b.HasIndex("NationalityId");

                    b.HasIndex("PrivilegeId");

                    b.HasIndex("VenueId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.TimeOff", b =>
                {
                    b.Property<int>("IdTimeOff")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTimeOff"));

                    b.Property<DateTime>("BeginTimeOff")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndTimeOff")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer");

                    b.HasKey("IdTimeOff");

                    b.HasIndex("StaffId");

                    b.ToTable("TimeOffs");
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.Venue", b =>
                {
                    b.Property<int>("IdVenue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdVenue"));

                    b.Property<string>("VenueName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdVenue");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("MPTC_API.Models.BigData.Category", b =>
                {
                    b.Property<int>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCategory"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdCategory");

                    b.ToTable("Categorys");
                });

            modelBuilder.Entity("MPTC_API.Models.BigData.Resource", b =>
                {
                    b.Property<int>("IdResource")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdResource"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ResourceTypeId")
                        .HasColumnType("integer");

                    b.Property<double>("Size")
                        .HasColumnType("double precision");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Uripath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdResource");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ResourceTypeId");

                    b.HasIndex("StaffId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("MPTC_API.Models.BigData.ResourceInteraction", b =>
                {
                    b.Property<int>("IdResourceInteraction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdResourceInteraction"));

                    b.Property<int>("ResourceId")
                        .HasColumnType("integer");

                    b.Property<int>("ViewNumber")
                        .HasColumnType("integer");

                    b.HasKey("IdResourceInteraction");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceInteractions");
                });

            modelBuilder.Entity("MPTC_API.Models.BigData.ResourceType", b =>
                {
                    b.Property<int>("IdResourceType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdResourceType"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdResourceType");

                    b.ToTable("ResourceTypes");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.Exam", b =>
                {
                    b.Property<int>("IdExam")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdExam"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.Property<int>("Session")
                        .HasColumnType("integer");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Uripath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UripathAssetNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdExam");

                    b.HasIndex("LevelId");

                    b.HasIndex("StaffId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.Level", b =>
                {
                    b.Property<int>("IdLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdLevel"));

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdLevel");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.ProfSubject", b =>
                {
                    b.Property<int>("IdProfSubject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdProfSubject"));

                    b.Property<int>("StaffId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.HasKey("IdProfSubject");

                    b.HasIndex("StaffId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ProfSubjects");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.ResultNote", b =>
                {
                    b.Property<int>("IdResultNote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdResultNote"));

                    b.Property<double>("Accuracy")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExamId")
                        .HasColumnType("integer");

                    b.Property<double>("ScoreFinal")
                        .HasColumnType("double precision");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("IdResultNote");

                    b.HasIndex("ExamId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.ToTable("ResultNotes");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.ResultNoteSection", b =>
                {
                    b.Property<int>("IdResultNoteSection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdResultNoteSection"));

                    b.Property<int>("ResultNoteId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectSectionId")
                        .HasColumnType("integer");

                    b.HasKey("IdResultNoteSection");

                    b.HasIndex("ResultNoteId");

                    b.HasIndex("SubjectSectionId");

                    b.ToTable("ResultNoteSections");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.Section", b =>
                {
                    b.Property<int>("IdSection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSection"));

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdSection");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.Student", b =>
                {
                    b.Property<int>("IdStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdStudent"));

                    b.Property<DateTime>("Birth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HomeAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Matricule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NationalityId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VenueId")
                        .HasColumnType("integer");

                    b.HasKey("IdStudent");

                    b.HasIndex("NationalityId");

                    b.HasIndex("VenueId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.StudentLevel", b =>
                {
                    b.Property<int>("IdStudentLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdStudentLevel"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("IdStudentLevel");

                    b.HasIndex("LevelId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentLevels");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.Subject", b =>
                {
                    b.Property<int>("IdSubject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSubject"));

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdSubject");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.SubjectSection", b =>
                {
                    b.Property<int>("IdSubjectSection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSubjectSection"));

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.Property<double>("Scale")
                        .HasColumnType("double precision");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.HasKey("IdSubjectSection");

                    b.HasIndex("LevelId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectSections");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.TempResult", b =>
                {
                    b.Property<int>("IdTempResult")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTempResult"));

                    b.Property<double>("Accuracy")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExamId")
                        .HasColumnType("integer");

                    b.Property<double>("FinalScore")
                        .HasColumnType("double precision");

                    b.Property<int>("StaffId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("IdTempResult");

                    b.HasIndex("ExamId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.ToTable("TempResults");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.TempResultSection", b =>
                {
                    b.Property<int>("IdTempResultSection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTempResultSection"));

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.Property<int>("SubjectSectionId")
                        .HasColumnType("integer");

                    b.Property<int>("TempResultId")
                        .HasColumnType("integer");

                    b.HasKey("IdTempResultSection");

                    b.HasIndex("SubjectSectionId");

                    b.HasIndex("TempResultId");

                    b.ToTable("TempResultSections");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.Log", b =>
                {
                    b.HasOne("MPTC_API.Models.Attendance.Staff", "Staff")
                        .WithMany("Logs")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.Member", b =>
                {
                    b.HasOne("MPTC_API.Models.Attendance.Staff", "Staff")
                        .WithOne("Member")
                        .HasForeignKey("MPTC_API.Models.Attendance.Member", "StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.Policy", b =>
                {
                    b.HasOne("MPTC_API.Models.Attendance.Privilege", "Privilege")
                        .WithMany("Policies")
                        .HasForeignKey("PrivilegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Privilege");
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.Sanction", b =>
                {
                    b.HasOne("MPTC_API.Models.Attendance.Policy", "Policy")
                        .WithMany("Sanctions")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MPTC_API.Models.Attendance.Staff", "Staff")
                        .WithMany("Sanctions")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policy");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.Schedule", b =>
                {
                    b.HasOne("MPTC_API.Models.Attendance.Staff", "Staff")
                        .WithMany("Schedules")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.Staff", b =>
                {
                    b.HasOne("MPTC_API.Models.Attendance.Nationality", "Nationality")
                        .WithMany("Staffs")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MPTC_API.Models.Attendance.Privilege", "Privilege")
                        .WithMany("Staffs")
                        .HasForeignKey("PrivilegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MPTC_API.Models.Attendance.Venue", "Venue")
                        .WithMany("Staffs")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nationality");

                    b.Navigation("Privilege");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.TimeOff", b =>
                {
                    b.HasOne("MPTC_API.Models.Attendance.Staff", "Staff")
                        .WithMany("TimeOffs")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("MPTC_API.Models.BigData.Resource", b =>
                {
                    b.HasOne("MPTC_API.Models.BigData.Category", "Category")
                        .WithMany("Resources")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MPTC_API.Models.BigData.ResourceType", "ResourceType")
                        .WithMany("Resources")
                        .HasForeignKey("ResourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MPTC_API.Models.Attendance.Staff", "Staff")
                        .WithMany("Resources")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ResourceType");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("MPTC_API.Models.BigData.ResourceInteraction", b =>
                {
                    b.HasOne("MPTC_API.Models.BigData.Resource", "Resource")
                        .WithMany("ResourceInteractions")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.Exam", b =>
                {
                    b.HasOne("MPTC_API.Models.Education.Level", "Level")
                        .WithMany("Exams")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MPTC_API.Models.Attendance.Staff", "Staff")
                        .WithMany("Exams")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MPTC_API.Models.Education.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Staff");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.ProfSubject", b =>
                {
                    b.HasOne("MPTC_API.Models.Attendance.Staff", "Staff")
                        .WithMany("ProfSubjects")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MPTC_API.Models.Education.Subject", "Subject")
                        .WithMany("ProfSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.ResultNote", b =>
                {
                    b.HasOne("MPTC_API.Models.Education.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MPTC_API.Models.Attendance.Staff", "Staff")
                        .WithMany("ResultNotes")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MPTC_API.Models.Education.Student", "Student")
                        .WithMany("ResultNotes")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.ResultNoteSection", b =>
                {
                    b.HasOne("MPTC_API.Models.Education.ResultNote", "ResultNote")
                        .WithMany("ResultNoteSections")
                        .HasForeignKey("ResultNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MPTC_API.Models.Education.SubjectSection", "SubjectSection")
                        .WithMany("ResultNoteSections")
                        .HasForeignKey("SubjectSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResultNote");

                    b.Navigation("SubjectSection");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.Student", b =>
                {
                    b.HasOne("MPTC_API.Models.Attendance.Nationality", "Nationality")
                        .WithMany("Students")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MPTC_API.Models.Attendance.Venue", "Venue")
                        .WithMany("Students")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nationality");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.StudentLevel", b =>
                {
                    b.HasOne("MPTC_API.Models.Education.Level", "Level")
                        .WithMany("StudentLevels")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MPTC_API.Models.Education.Student", "Student")
                        .WithMany("StudentLevels")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.SubjectSection", b =>
                {
                    b.HasOne("MPTC_API.Models.Education.Level", "Level")
                        .WithMany("SubjectSections")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MPTC_API.Models.Education.Section", "Section")
                        .WithMany("SubjectSections")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MPTC_API.Models.Education.Subject", "Subject")
                        .WithMany("SubjectSections")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Section");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.TempResult", b =>
                {
                    b.HasOne("MPTC_API.Models.Education.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MPTC_API.Models.Attendance.Staff", "Staff")
                        .WithMany("TempResults")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MPTC_API.Models.Education.Student", "Student")
                        .WithMany("TempResults")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Staff");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.TempResultSection", b =>
                {
                    b.HasOne("MPTC_API.Models.Education.SubjectSection", "SubjectSection")
                        .WithMany("TempResultSections")
                        .HasForeignKey("SubjectSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MPTC_API.Models.Education.TempResult", "TempResult")
                        .WithMany("TempResultSections")
                        .HasForeignKey("TempResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubjectSection");

                    b.Navigation("TempResult");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MPTC_API.Models.Attendance.Member", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MPTC_API.Models.Attendance.Member", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MPTC_API.Models.Attendance.Member", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MPTC_API.Models.Attendance.Member", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.Nationality", b =>
                {
                    b.Navigation("Staffs");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.Policy", b =>
                {
                    b.Navigation("Sanctions");
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.Privilege", b =>
                {
                    b.Navigation("Policies");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.Staff", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Logs");

                    b.Navigation("Member")
                        .IsRequired();

                    b.Navigation("ProfSubjects");

                    b.Navigation("Resources");

                    b.Navigation("ResultNotes");

                    b.Navigation("Sanctions");

                    b.Navigation("Schedules");

                    b.Navigation("TempResults");

                    b.Navigation("TimeOffs");
                });

            modelBuilder.Entity("MPTC_API.Models.Attendance.Venue", b =>
                {
                    b.Navigation("Staffs");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("MPTC_API.Models.BigData.Category", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("MPTC_API.Models.BigData.Resource", b =>
                {
                    b.Navigation("ResourceInteractions");
                });

            modelBuilder.Entity("MPTC_API.Models.BigData.ResourceType", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.Level", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("StudentLevels");

                    b.Navigation("SubjectSections");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.ResultNote", b =>
                {
                    b.Navigation("ResultNoteSections");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.Section", b =>
                {
                    b.Navigation("SubjectSections");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.Student", b =>
                {
                    b.Navigation("ResultNotes");

                    b.Navigation("StudentLevels");

                    b.Navigation("TempResults");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.Subject", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("ProfSubjects");

                    b.Navigation("SubjectSections");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.SubjectSection", b =>
                {
                    b.Navigation("ResultNoteSections");

                    b.Navigation("TempResultSections");
                });

            modelBuilder.Entity("MPTC_API.Models.Education.TempResult", b =>
                {
                    b.Navigation("TempResultSections");
                });
#pragma warning restore 612, 618
        }
    }
}
